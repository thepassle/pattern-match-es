import { Context, ServerStartParams } from '@web/dev-server-core';
import { TestRunnerCoreConfig } from '../../config/TestRunnerCoreConfig';
import { TestSessionManager } from '../../test-session/TestSessionManager';
import { TestRunnerPlugin } from '../TestRunnerPlugin';
import { TestSession } from '../../test-session/TestSession';
interface SessionMessage extends Record<string, unknown> {
    sessionId: string;
    testFile: string;
}
declare class TestRunnerApiPlugin implements TestRunnerPlugin {
    name: string;
    injectWebSocket: boolean;
    private config;
    private plugins;
    private sessions;
    /** key: session id, value: test file import url */
    private testFileUrls;
    /** key: session id, value: browser url */
    private testSessionUrls;
    constructor(config: TestRunnerCoreConfig, plugins: TestRunnerPlugin[], sessions: TestSessionManager);
    getSession(sessionId: string): TestSession | import("../..").DebugTestSession;
    parseSessionMessage(data: Record<string, unknown>): {
        message: SessionMessage;
        session: TestSession | import("../..").DebugTestSession;
    };
    transform(context: Context): Promise<void>;
    serverStart({ webSockets }: ServerStartParams): void;
    private _onSessionStarted;
    private _onSessionFinished;
    private _onCommand;
    /**
     * Waits for web socket to become disconnected, and checks after disconnect if it was expected
     * or if some error occurred.
     */
    private _waitForDisconnect;
    private _onMultiInitialized;
    private _setSessionFailed;
}
export declare function testRunnerApiPlugin(config: TestRunnerCoreConfig, plugins: TestRunnerPlugin[], sessions: TestSessionManager): TestRunnerApiPlugin;
export {};
//# sourceMappingURL=testRunnerApiPlugin.d.ts.map